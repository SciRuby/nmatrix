= NMatrix

Fast Numerical Linear Algebra Library for Ruby

* {Installation guide}[https://github.com/SciRuby/nmatrix/wiki/Installation]
* {sciruby.com}[http://sciruby.com]
* {Google+}[https://plus.google.com/109304769076178160953/posts]

== Description

NMatrix is a fast numerical linear algebra library for Ruby, written mostly in C and C++. It is part of the SciRuby project.

NMatrix was inspired by and based heavily upon {NArray}[http://narray.rubyforge.org], by Masahiro Tanaka.

== Installation

To install the latest stable version:

    gem install nmatrix

However, you will need to install {ATLAS}[http://math-atlas.sourceforge.net/] with {CBLAS}[http://www.prism.gatech.edu/~ndantam3/cblas-doc/doc/html/main.html] (C interface to {BLAS}[http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms]) first. Those directions can be found {here}[https://github.com/SciRuby/nmatrix/wiki/Installation]. The requirements for NMatrix are:

* ATLAS
* {LAPACK}[http://www.netlib.org/lapack/#_presentation] (it's not recommended on OSX)
* GCC 4.3+
* Ruby 1.9 (we're working on supporting 2.0)
* {packable}[http://github.com/marcandre/packable] 1.3.5 (used for I/O)

Also, if you want to obtain the latest code, you should do:

    git clone https://github.com/SciRuby/nmatrix.git
    cd nmatrix/
    rake install

If you get errors about clapack.h or cblas.h, you should look {in the installation page}[https://github.com/SciRuby/nmatrix/wiki/Installation] for information on how to solve it. If that's not enough, open an {issue}[https://github.com/SciRuby/nmatrix/issues] or send a message in the {mailing list}[https://groups.google.com/forum/?fromgroups#!forum/sciruby-dev].

== Documentation

There's {API documentation in our website}[http://sciruby.com/nmatrix/docs/], a guide about {how to create a NMatrix}[https://github.com/SciRuby/nmatrix/wiki/How-to-create-a-NMatrix] and some tips on {how to use the shortcuts}[http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts/].

We're working to improve the documentation. The best way to get help is by posting {issues}[https://github.com/SciRuby/nmatrix/issues] or sending e-mails to our {mailing list}[https://groups.google.com/forum/?fromgroups#!forum/sciruby-dev]. The one responsible for this is @agarie, so send him an e-mail or look for `agarie` on #sciruby at chat.freenode.net if you want to ask questions or offer suggestions.

== Examples

Create a new NMatrix from a ruby array: 

    >> NMatrix.new([2, 3], [0, 1, 2, 3, 4, 5], :int64).pp
      [0, 1, 2]
      [3, 4, 5]
    => nil

Create a new NMatrix using the +N+ shortcut:

    >> m = N[ [2, 3, 4], [7, 8, 9] ]
    => #<NMatrix:0x007f8e121b6cf8shape:[2,3] dtype:int32 stype:dense> 
    >> m.pp
      [2, 3, 4]
      [7, 8, 9]

If you want to learn more about how to create a matrix, {read the guide in our wiki}[https://github.com/SciRuby/nmatrix/wiki/How-to-create-a-NMatrix].

You can find the complete API documentation {in our website}[http://sciruby.com/nmatrix/docs/].

== Developers

Read the instructions in +CONTRIBUTING.md+ if you want to help NMatrix.

== Features

The following features exist in the current version of NMatrix (0.0.3):

* Matrix storage containers: dense, yale, list (more to come)
* Data types: uint8, int8, int16, int32, int64, float32, float64, complex64, complex128, rational64, rational128
  (incomplete)
* Conversion between storage and data types (except from-complex, and from-float-to-rational)
* Element-wise operations and comparisons for dense and yale
* Matrix-matrix multiplication for dense (using ATLAS) and yale
* Matrix-vector multiplication for dense (using ATLAS)
* Dense and list matrix slicing and referencing
* Native reading and writing of dense and yale matrices
  * Optional compression for dense matrices with symmetry or triangularity: symmetric, skew, hermitian, upper, lower
* Matlab .MAT v5 file input
* C and C++ API
* BLAS internal implementations (no library) and ATLAS (with library) access:
  * Level 1: xROT, xROTG (BLAS dtypes only)
  * Level 2: xGEMV
  * Level 3: xGEMM, xTRSM
* LAPACK ATLAS access:
  * xGETRF, xGETRI, xGETRS, xGESV (Gaussian elimination)
  * xPOTRF, xPOTRI, xPOTRS, xPOSV (Cholesky factorization)
  * xLASWP, xSCAL, xLAUUM
* LAPACK-less internal implementations (no LAPACK needed and working on non-BLAS dtypes):
  * xGETRF
  * xLASWP, xSCAL
  * xLAUUM (no LAPACK needed, but BLAS dtypes only)
* LU decomposition
* Matrix inversions (requires LAPACK; BLAS dtypes only)
* Determinant calculation for BLAS dtypes

You can find what we're working on in our {roadmap}[https://github.com/SciRuby/nmatrix/wiki/Roadmap].

== Warning

Please be aware that SciRuby and NMatrix are in *alpha* status. If you're thinking of using SciRuby/NMatrix to write mission-critical code, such as for driving a car or flying a space shuttle, you may wish to choose other software for now.

You should also be aware that NMatrix and NArray are incompatible with one another: you should not install both at the same time. Unfortunately, that causes problems with Ruby/GSL, which currently depends upon NArray. As such, we are working on a {patch for Ruby/GSL}[https://github.com/SciRuby/rb-gsl].

If you're developing something that needs Ruby/GSL and/or NArray, you might find it useful to create {gemsets with RVM}[https://rvm.io/gemsets/basics/].

== License

Copyright (c) 2012--13, The Ruby Science Foundation.

All rights reserved.

NMatrix, along with SciRuby, is licensed under the BSD 2-clause license. See
{LICENSE.txt}[https://github.com/SciRuby/sciruby/wiki/License] for details.

== DONATIONS

Support a SciRuby Fellow:

{<img src=http://pledgie.com/campaigns/15783.png?skin_name=chrome%3E}[http://www.pledgie.com/campaigns/15783]
